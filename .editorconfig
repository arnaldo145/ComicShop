### References
# http://editorconfig.org
# https://github.com/ktaranov/naming-convention/blob/master/C%23%20Coding%20Standards%20and%20Naming%20Conventions.md
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview
# https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions
# https://kent-boogaart.com/blog/editorconfig-reference-for-c-developers
###

### Visual Studio 2019
# Check option:
# Tools > Options > Text Editor > C# > Advanced > Open Documents
###

### Visual Studio Code
# Install extension via download or CLI:
# 1.
#   Download: https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig
#   CLI: code --install-extension editorconfig.editorconfig
# 2.
#   Enable the following configuration: "omnisharp.enableRoslynAnalyzers": true
###

# Top-most .editorconfig file
root = true

# Don't use tabs for indentation
[*]
indent_style = space

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
end_of_line = crlf
insert_final_newline = true
charset = utf-8-bom

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Powershell files	
[*.ps1]	
indent_size = 2
		
# Shell script files	
[*.sh]	
end_of_line = lf	
indent_size = 2

# .NET formatting rules
[*.{cs,vb}]

# [IDE0055] Fix formatting
dotnet_diagnostic.IDE0055.severity = warning

# Sort using and import directives with System.* appearing first	
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false

# [IDE0005] Remove unnecessary import
dotnet_diagnostic.IDE0005.severity = error	

# [IDE0003/IDE00009] Avoid "this." and "me" unless absolutely necessary
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_event = false:error

# [IDE0049] Use language keywords instead of BCL types for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error

# [IDE0017/IDE0028/IDE0029/IDE0030/IDE0031] Suggest more modern language features when available
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion

# [IDE0033] Use explicitly provided tuple name
dotnet_style_explicit_tuple_names = true:suggestion

# [IDE0045/IDE0046] Prefer conditional expression
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_prefer_conditional_expression_over_return = true

# [IDE0075] Simplify conditional expression
dotnet_style_prefer_simplified_boolean_expressions = true:error

# [IDE0041] Use is null check 
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:error

# [IDE0035] Remove unreachable code	
dotnet_diagnostic.IDE0035.severity = error	

# [IDE0040] Add accessibility modifiers
dotnet_style_require_accessibility_modifiers = always:error
	
# [IDE0043] Format string contains invalid placeholder
dotnet_diagnostic.IDE0043.severity = error

# [IDE0044] Add readonly modifier	
dotnet_style_readonly_field = true:suggestion

# [IDE0054/IDE0074] Use compound assignment
dotnet_style_prefer_compound_assignment = true:error

# C# formatting rules
[*.cs]

# Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true:error
csharp_new_line_before_catch = true:error
csharp_new_line_before_finally = true:error
csharp_new_line_before_members_in_object_initializers = true:error
csharp_new_line_before_members_in_anonymous_types = true:error
csharp_new_line_between_query_expression_clauses = true:error

# Indentation options
csharp_indent_switch_labels = true:error
csharp_indent_case_contents = true:error
csharp_indent_case_labels = true:error
csharp_indent_labels = flush_left:error
csharp_indent_block_contents = true:error
csharp_indent_braces = false:error

# Spacing options
csharp_space_between_method_call_empty_parameter_list_parentheses = false:error
csharp_space_between_method_call_name_and_opening_parenthesis = false:error
csharp_space_between_method_call_parameter_list_parentheses = false:error
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false:error
csharp_space_between_method_declaration_name_and_open_parenthesis = false:error
csharp_space_between_method_declaration_parameter_list_parentheses = false:error
csharp_space_before_open_square_brackets = false:error
csharp_space_between_empty_square_brackets = false:error
csharp_space_between_square_brackets = false:error
csharp_space_after_colon_in_inheritance_clause = true:error
csharp_space_after_comma = true:error
csharp_space_after_dot = false:error
csharp_space_after_semicolon_in_for_statement = false:error
csharp_space_before_colon_in_inheritance_clause = true:error
csharp_space_before_comma = false:error
csharp_space_before_dot = false:error
csharp_space_before_semicolon_in_for_statement = false:error
csharp_space_around_binary_operators = before_and_after:error
csharp_space_after_keywords_in_control_flow_statements = true:error
csharp_space_after_cast = false:error
csharp_space_around_declaration_statements = do_not_ignore:error
csharp_space_between_parentheses = false:error

# Wrap options
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true

# [IDE0007/IDE0008] Prefer "var"
csharp_style_var_elsewhere = true:suggestion
csharp_style_var_for_built_in_types = true:error
csharp_style_var_when_type_is_apparent = true:error
csharp_style_var_for_locals = true:error

# [IDE0011] Add braces
csharp_prefer_braces = true:suggestion

# [IDE0019/IDE0020/IDE0018/IDE0016/IDE1005] Suggest more modern language features when available
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_inlined_variable_declaration = true:error
csharp_style_throw_expression = true:error
csharp_style_conditional_delegate_call = true:error

# [IDE0021/IDE0022/IDE0023/IDE0025/IDE0026/IDE0027] Expression-bodied members
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = false:none
csharp_style_expression_bodied_indexers = true:error
csharp_style_expression_bodied_accessors = true:suggestion

# [IDE0034] Simplify 'default' expression
csharp_prefer_simple_default_expression = true:suggestion

# [IDE0036] Order modifiers
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:error

# [IDE0063] Use simple 'using' statement
csharp_prefer_simple_using_statement = true:suggestion

# [IDE0065] 'using' directive placement
csharp_using_directive_placement = outside_namespace:error

# [IDE0066] Use switch expression
csharp_style_prefer_switch_expression = false:suggestion

## Naming rules

# Const uses pascal case
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = error
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.applicable_accessibilities  = *
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Private and internal: starts with _
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = error
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_style
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# Methods, events and properties uses pascal case
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.severity = error
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.symbols = method_and_property_symbols
dotnet_naming_rule.methods_and_properties_must_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.method_and_property_symbols.applicable_kinds = method, property, event
dotnet_naming_symbols.method_and_property_symbols.applicable_accessibilities = *
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Public members must be capitalized
dotnet_naming_rule.public_members_must_be_capitalized.severity = error
dotnet_naming_rule.public_members_must_be_capitalized.symbols  = public_symbols
dotnet_naming_rule.public_members_must_be_capitalized.style    = first_word_upper_case_style
dotnet_naming_symbols.public_symbols.applicable_kinds   = property, method, field, event, delegate
dotnet_naming_symbols.public_symbols.required_modifiers = public, internal, protected, protected_internal
dotnet_naming_style.first_word_upper_case_style.capitalization = first_word_upper

# Async methods end in Async
dotnet_naming_rule.async_methods_must_end_with_async.severity = error
dotnet_naming_rule.async_methods_must_end_with_async.symbols = any_async_methods
dotnet_naming_rule.async_methods_must_end_with_async.style = end_in_async_style
dotnet_naming_symbols.any_async_methods.applicable_kinds = method
dotnet_naming_symbols.any_async_methods.applicable_accessibilities = *
dotnet_naming_symbols.any_async_methods.required_modifiers = async
dotnet_naming_style.end_in_async_style.capitalization = pascal_case
dotnet_naming_style.end_in_async_style.required_suffix= Async

# Const all lower
dotnet_naming_rule.parameters_are_camel_case.severity = error
dotnet_naming_rule.parameters_are_camel_case.symbols = parameter_symbol
dotnet_naming_rule.parameters_are_camel_case.style = parameter_style
dotnet_naming_symbols.parameter_symbol.applicable_kinds = parameter
dotnet_naming_style.parameter_style.capitalization = camel_case

# Class must be capitalized
dotnet_naming_symbols.non_interface_type_symbol.applicable_kinds = class,struct,enum,delegate
dotnet_naming_style.non_interface_type_style.capitalization = pascal_case
dotnet_naming_rule.non_interface_types_are_pascal_case.severity = error
dotnet_naming_rule.non_interface_types_are_pascal_case.symbols = non_interface_type_symbol
dotnet_naming_rule.non_interface_types_are_pascal_case.style = non_interface_type_style

# Class must be capitalized and starts with I
dotnet_naming_symbols.interface_type_symbol.applicable_kinds = interface
dotnet_naming_style.interface_type_style.capitalization = pascal_case
dotnet_naming_style.interface_type_style.required_prefix = I
dotnet_naming_rule.interface_types_must_be_prefixed_with_I.severity = error
dotnet_naming_rule.interface_types_must_be_prefixed_with_I.symbols = interface_type_symbol
dotnet_naming_rule.interface_types_must_be_prefixed_with_I.style = interface_type_style

# Ignore 'Async methods end in Async' in Tests
[**/*Tests*/**]
dotnet_naming_rule.async_methods_must_end_with_async.severity = none
dotnet_naming_rule.async_methods_must_end_with_async.symbols = method_symbols
dotnet_naming_rule.async_methods_must_end_with_async.style = end_in_async_style
